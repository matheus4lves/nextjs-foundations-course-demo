"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_document";
exports.ids = ["pages/_document"];
exports.modules = {

/***/ "./node_modules/next/dist/pages/_document.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/pages/_document.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar _excluded = [\"strategy\", \"src\", \"children\", \"dangerouslySetInnerHTML\"],\n    _excluded2 = [\"strategy\"],\n    _excluded3 = [\"crossOrigin\", \"nonce\"],\n    _excluded4 = [\"strategy\", \"children\", \"dangerouslySetInnerHTML\", \"src\"];\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  Head: function Head() {\n    return _Head;\n  },\n  NextScript: function NextScript() {\n    return _NextScript;\n  },\n  Html: function Html() {\n    return _Html;\n  },\n  Main: function Main() {\n    return _Main;\n  },\n\n  /**\n  * `Document` component handles the initial `document` markup and renders only on the server side.\n  * Commonly used for implementing server side rendering for `css-in-js` libraries.\n  */\n  \"default\": function _default() {\n    return Document;\n  }\n});\n\nvar _react = /*#__PURE__*/_interop_require_wildcard(__webpack_require__(/*! react */ \"react\"));\n\nvar _constants = __webpack_require__(/*! ../shared/lib/constants */ \"../shared/lib/constants\");\n\nvar _getpagefiles = __webpack_require__(/*! ../server/get-page-files */ \"../server/get-page-files\");\n\nvar _htmlescape = __webpack_require__(/*! ../server/htmlescape */ \"../server/htmlescape\");\n\nvar _iserror = /*#__PURE__*/_interop_require_default(__webpack_require__(/*! ../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _htmlcontext = __webpack_require__(/*! ../shared/lib/html-context */ \"../shared/lib/html-context\");\n\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/** Set of pages that have triggered a large data warning on production mode. */\n\n\nvar largePageDataWarnings = new Set();\n\nfunction getDocumentFiles(buildManifest, pathname, inAmpMode) {\n  var sharedFiles = (0, _getpagefiles.getPageFiles)(buildManifest, \"/_app\");\n  var pageFiles =  true && inAmpMode ? [] : (0, _getpagefiles.getPageFiles)(buildManifest, pathname);\n  return {\n    sharedFiles: sharedFiles,\n    pageFiles: pageFiles,\n    allFiles: _toConsumableArray(new Set([].concat(_toConsumableArray(sharedFiles), _toConsumableArray(pageFiles))))\n  };\n}\n\nfunction _getPolyfillScripts(context, props) {\n  // polyfills.js has to be rendered as nomodule without async\n  // It also has to be the first script to load\n  var assetPrefix = context.assetPrefix,\n      buildManifest = context.buildManifest,\n      devOnlyCacheBusterQueryString = context.devOnlyCacheBusterQueryString,\n      disableOptimizedLoading = context.disableOptimizedLoading,\n      crossOrigin = context.crossOrigin;\n  return buildManifest.polyfillFiles.filter(function (polyfill) {\n    return polyfill.endsWith(\".js\") && !polyfill.endsWith(\".module.js\");\n  }).map(function (polyfill) {\n    return /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n      key: polyfill,\n      defer: !disableOptimizedLoading,\n      nonce: props.nonce,\n      crossOrigin: props.crossOrigin || crossOrigin,\n      noModule: true,\n      src: \"\".concat(assetPrefix, \"/_next/\").concat(polyfill).concat(devOnlyCacheBusterQueryString)\n    });\n  });\n}\n\nfunction hasComponentProps(child) {\n  return !!child && !!child.props;\n}\n\nfunction AmpStyles(_ref) {\n  var styles = _ref.styles;\n  if (!styles) return null; // try to parse styles from fragment for backwards compat\n\n  var curStyles = Array.isArray(styles) ? styles : [];\n\n  if ( // @ts-ignore Property 'props' does not exist on type ReactElement\n  styles.props && // @ts-ignore Property 'props' does not exist on type ReactElement\n  Array.isArray(styles.props.children)) {\n    var hasStyles = function hasStyles(el) {\n      var _el_props, _el_props_dangerouslySetInnerHTML;\n\n      return el == null ? void 0 : (_el_props = el.props) == null ? void 0 : (_el_props_dangerouslySetInnerHTML = _el_props.dangerouslySetInnerHTML) == null ? void 0 : _el_props_dangerouslySetInnerHTML.__html;\n    }; // @ts-ignore Property 'props' does not exist on type ReactElement\n\n\n    styles.props.children.forEach(function (child) {\n      if (Array.isArray(child)) {\n        child.forEach(function (el) {\n          return hasStyles(el) && curStyles.push(el);\n        });\n      } else if (hasStyles(child)) {\n        curStyles.push(child);\n      }\n    });\n  }\n  /* Add custom styles before AMP styles to prevent accidental overrides */\n\n\n  return /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n    \"amp-custom\": \"\",\n    dangerouslySetInnerHTML: {\n      __html: curStyles.map(function (style) {\n        return style.props.dangerouslySetInnerHTML.__html;\n      }).join(\"\").replace(/\\/\\*# sourceMappingURL=.*\\*\\//g, \"\").replace(/\\/\\*@ sourceURL=.*?\\*\\//g, \"\")\n    }\n  });\n}\n\nfunction _getDynamicChunks(context, props, files) {\n  var dynamicImports = context.dynamicImports,\n      assetPrefix = context.assetPrefix,\n      isDevelopment = context.isDevelopment,\n      devOnlyCacheBusterQueryString = context.devOnlyCacheBusterQueryString,\n      disableOptimizedLoading = context.disableOptimizedLoading,\n      crossOrigin = context.crossOrigin;\n  return dynamicImports.map(function (file) {\n    if (!file.endsWith(\".js\") || files.allFiles.includes(file)) return null;\n    return /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n      async: !isDevelopment && disableOptimizedLoading,\n      defer: !disableOptimizedLoading,\n      key: file,\n      src: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n      nonce: props.nonce,\n      crossOrigin: props.crossOrigin || crossOrigin\n    });\n  });\n}\n\nfunction _getScripts(context, props, files) {\n  var _buildManifest_lowPriorityFiles;\n\n  var assetPrefix = context.assetPrefix,\n      buildManifest = context.buildManifest,\n      isDevelopment = context.isDevelopment,\n      devOnlyCacheBusterQueryString = context.devOnlyCacheBusterQueryString,\n      disableOptimizedLoading = context.disableOptimizedLoading,\n      crossOrigin = context.crossOrigin;\n  var normalScripts = files.allFiles.filter(function (file) {\n    return file.endsWith(\".js\");\n  });\n  var lowPriorityScripts = (_buildManifest_lowPriorityFiles = buildManifest.lowPriorityFiles) == null ? void 0 : _buildManifest_lowPriorityFiles.filter(function (file) {\n    return file.endsWith(\".js\");\n  });\n  return [].concat(_toConsumableArray(normalScripts), _toConsumableArray(lowPriorityScripts)).map(function (file) {\n    return /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n      key: file,\n      src: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n      nonce: props.nonce,\n      async: !isDevelopment && disableOptimizedLoading,\n      defer: !disableOptimizedLoading,\n      crossOrigin: props.crossOrigin || crossOrigin\n    });\n  });\n}\n\nfunction getPreNextWorkerScripts(context, props) {\n  var assetPrefix = context.assetPrefix,\n      scriptLoader = context.scriptLoader,\n      crossOrigin = context.crossOrigin,\n      nextScriptWorkers = context.nextScriptWorkers; // disable `nextScriptWorkers` in edge runtime\n\n  if (!nextScriptWorkers || \"nodejs\" === \"edge\") return null;\n\n  try {\n    var _non_webpack_require2 = require(\"@builder.io/partytown/integration\"),\n        partytownSnippet = _non_webpack_require2.partytownSnippet;\n\n    var children = Array.isArray(props.children) ? props.children : [props.children]; // Check to see if the user has defined their own Partytown configuration\n\n    var userDefinedConfig = children.find(function (child) {\n      var _child_props, _child_props_dangerouslySetInnerHTML;\n\n      return hasComponentProps(child) && (child == null ? void 0 : (_child_props = child.props) == null ? void 0 : (_child_props_dangerouslySetInnerHTML = _child_props.dangerouslySetInnerHTML) == null ? void 0 : _child_props_dangerouslySetInnerHTML.__html.length) && \"data-partytown-config\" in child.props;\n    });\n    return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, !userDefinedConfig && /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n      \"data-partytown-config\": \"\",\n      dangerouslySetInnerHTML: {\n        __html: \"\\n            partytown = {\\n              lib: \\\"\".concat(assetPrefix, \"/_next/static/~partytown/\\\"\\n            };\\n          \")\n      }\n    }), /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n      \"data-partytown\": \"\",\n      dangerouslySetInnerHTML: {\n        __html: partytownSnippet()\n      }\n    }), (scriptLoader.worker || []).map(function (file, index) {\n      var strategy = file.strategy,\n          src = file.src,\n          scriptChildren = file.children,\n          dangerouslySetInnerHTML = file.dangerouslySetInnerHTML,\n          scriptProps = _objectWithoutProperties(file, _excluded);\n\n      var srcProps = {};\n\n      if (src) {\n        // Use external src if provided\n        srcProps.src = src;\n      } else if (dangerouslySetInnerHTML && dangerouslySetInnerHTML.__html) {\n        // Embed inline script if provided with dangerouslySetInnerHTML\n        srcProps.dangerouslySetInnerHTML = {\n          __html: dangerouslySetInnerHTML.__html\n        };\n      } else if (scriptChildren) {\n        // Embed inline script if provided with children\n        srcProps.dangerouslySetInnerHTML = {\n          __html: typeof scriptChildren === \"string\" ? scriptChildren : Array.isArray(scriptChildren) ? scriptChildren.join(\"\") : \"\"\n        };\n      } else {\n        throw new Error(\"Invalid usage of next/script. Did you forget to include a src attribute or an inline script? https://nextjs.org/docs/messages/invalid-script\");\n      }\n\n      return /*#__PURE__*/_react[\"default\"].createElement(\"script\", _objectSpread(_objectSpread(_objectSpread({}, srcProps), scriptProps), {}, {\n        type: \"text/partytown\",\n        key: src || index,\n        nonce: props.nonce,\n        \"data-nscript\": \"worker\",\n        crossOrigin: props.crossOrigin || crossOrigin\n      }));\n    }));\n  } catch (err) {\n    if ((0, _iserror[\"default\"])(err) && err.code !== \"MODULE_NOT_FOUND\") {\n      console.warn(\"Warning: \".concat(err.message));\n    }\n\n    return null;\n  }\n}\n\nfunction _getPreNextScripts(context, props) {\n  var scriptLoader = context.scriptLoader,\n      disableOptimizedLoading = context.disableOptimizedLoading,\n      crossOrigin = context.crossOrigin;\n  var webWorkerScripts = getPreNextWorkerScripts(context, props);\n  var beforeInteractiveScripts = (scriptLoader.beforeInteractive || []).filter(function (script) {\n    return script.src;\n  }).map(function (file, index) {\n    var _scriptProps$defer;\n\n    var strategy = file.strategy,\n        scriptProps = _objectWithoutProperties(file, _excluded2);\n\n    return /*#__PURE__*/_react[\"default\"].createElement(\"script\", _objectSpread(_objectSpread({}, scriptProps), {}, {\n      key: scriptProps.src || index,\n      defer: (_scriptProps$defer = scriptProps.defer) !== null && _scriptProps$defer !== void 0 ? _scriptProps$defer : !disableOptimizedLoading,\n      nonce: props.nonce,\n      \"data-nscript\": \"beforeInteractive\",\n      crossOrigin: props.crossOrigin || crossOrigin\n    }));\n  });\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, webWorkerScripts, beforeInteractiveScripts);\n}\n\nfunction getHeadHTMLProps(props) {\n  var crossOrigin = props.crossOrigin,\n      nonce = props.nonce,\n      restProps = _objectWithoutProperties(props, _excluded3); // This assignment is necessary for additional type checking to avoid unsupported attributes in <head>\n\n\n  var headProps = restProps;\n  return headProps;\n}\n\nfunction getAmpPath(ampPath, asPath) {\n  return ampPath || \"\".concat(asPath).concat(asPath.includes(\"?\") ? \"&\" : \"?\", \"amp=1\");\n}\n\nfunction getNextFontLinkTags(nextFontManifest, dangerousAsPath) {\n  var assetPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n  if (!nextFontManifest) {\n    return {\n      preconnect: null,\n      preload: null\n    };\n  }\n\n  var appFontsEntry = nextFontManifest.pages[\"/_app\"];\n  var pageFontsEntry = nextFontManifest.pages[dangerousAsPath];\n  var preloadedFontFiles = [].concat(_toConsumableArray(appFontsEntry !== null && appFontsEntry !== void 0 ? appFontsEntry : []), _toConsumableArray(pageFontsEntry !== null && pageFontsEntry !== void 0 ? pageFontsEntry : [])); // If no font files should preload but there's an entry for the path, add a preconnect tag.\n\n  var preconnectToSelf = !!(preloadedFontFiles.length === 0 && (appFontsEntry || pageFontsEntry));\n  return {\n    preconnect: preconnectToSelf ? /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n      \"data-next-font\": nextFontManifest.pagesUsingSizeAdjust ? \"size-adjust\" : \"\",\n      rel: \"preconnect\",\n      href: \"/\",\n      crossOrigin: \"anonymous\"\n    }) : null,\n    preload: preloadedFontFiles ? preloadedFontFiles.map(function (fontFile) {\n      var ext = /\\.(woff|woff2|eot|ttf|otf)$/.exec(fontFile)[1];\n      return /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n        key: fontFile,\n        rel: \"preload\",\n        href: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(fontFile)),\n        as: \"font\",\n        type: \"font/\".concat(ext),\n        crossOrigin: \"anonymous\",\n        \"data-next-font\": fontFile.includes(\"-s\") ? \"size-adjust\" : \"\"\n      });\n    }) : null\n  };\n}\n\nvar _Head = /*#__PURE__*/function (_react$default$Compon) {\n  _inherits(_Head, _react$default$Compon);\n\n  var _super = _createSuper(_Head);\n\n  function _Head() {\n    _classCallCheck(this, _Head);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_Head, [{\n    key: \"getCssLinks\",\n    value: function getCssLinks(files) {\n      var _this = this;\n\n      var _this$context = this.context,\n          assetPrefix = _this$context.assetPrefix,\n          devOnlyCacheBusterQueryString = _this$context.devOnlyCacheBusterQueryString,\n          dynamicImports = _this$context.dynamicImports,\n          crossOrigin = _this$context.crossOrigin,\n          optimizeCss = _this$context.optimizeCss,\n          optimizeFonts = _this$context.optimizeFonts;\n      var cssFiles = files.allFiles.filter(function (f) {\n        return f.endsWith(\".css\");\n      });\n      var sharedFiles = new Set(files.sharedFiles); // Unmanaged files are CSS files that will be handled directly by the\n      // webpack runtime (`mini-css-extract-plugin`).\n\n      var unmangedFiles = new Set([]);\n      var dynamicCssFiles = Array.from(new Set(dynamicImports.filter(function (file) {\n        return file.endsWith(\".css\");\n      })));\n\n      if (dynamicCssFiles.length) {\n        var existing = new Set(cssFiles);\n        dynamicCssFiles = dynamicCssFiles.filter(function (f) {\n          return !(existing.has(f) || sharedFiles.has(f));\n        });\n        unmangedFiles = new Set(dynamicCssFiles);\n        cssFiles.push.apply(cssFiles, _toConsumableArray(dynamicCssFiles));\n      }\n\n      var cssLinkElements = [];\n      cssFiles.forEach(function (file) {\n        var isSharedFile = sharedFiles.has(file);\n\n        if (!optimizeCss) {\n          cssLinkElements.push( /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n            key: \"\".concat(file, \"-preload\"),\n            nonce: _this.props.nonce,\n            rel: \"preload\",\n            href: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n            as: \"style\",\n            crossOrigin: _this.props.crossOrigin || crossOrigin\n          }));\n        }\n\n        var isUnmanagedFile = unmangedFiles.has(file);\n        cssLinkElements.push( /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n          key: file,\n          nonce: _this.props.nonce,\n          rel: \"stylesheet\",\n          href: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n          crossOrigin: _this.props.crossOrigin || crossOrigin,\n          \"data-n-g\": isUnmanagedFile ? undefined : isSharedFile ? \"\" : undefined,\n          \"data-n-p\": isUnmanagedFile ? undefined : isSharedFile ? undefined : \"\"\n        }));\n      });\n\n      if (false) {}\n\n      return cssLinkElements.length === 0 ? null : cssLinkElements;\n    }\n  }, {\n    key: \"getPreloadDynamicChunks\",\n    value: function getPreloadDynamicChunks() {\n      var _this2 = this;\n\n      var _this$context2 = this.context,\n          dynamicImports = _this$context2.dynamicImports,\n          assetPrefix = _this$context2.assetPrefix,\n          devOnlyCacheBusterQueryString = _this$context2.devOnlyCacheBusterQueryString,\n          crossOrigin = _this$context2.crossOrigin;\n      return dynamicImports.map(function (file) {\n        if (!file.endsWith(\".js\")) {\n          return null;\n        }\n\n        return /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n          rel: \"preload\",\n          key: file,\n          href: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n          as: \"script\",\n          nonce: _this2.props.nonce,\n          crossOrigin: _this2.props.crossOrigin || crossOrigin\n        });\n      }) // Filter out nulled scripts\n      .filter(Boolean);\n    }\n  }, {\n    key: \"getPreloadMainLinks\",\n    value: function getPreloadMainLinks(files) {\n      var _this3 = this;\n\n      var _this$context3 = this.context,\n          assetPrefix = _this$context3.assetPrefix,\n          devOnlyCacheBusterQueryString = _this$context3.devOnlyCacheBusterQueryString,\n          scriptLoader = _this$context3.scriptLoader,\n          crossOrigin = _this$context3.crossOrigin;\n      var preloadFiles = files.allFiles.filter(function (file) {\n        return file.endsWith(\".js\");\n      });\n      return [].concat(_toConsumableArray((scriptLoader.beforeInteractive || []).map(function (file) {\n        return /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n          key: file.src,\n          nonce: _this3.props.nonce,\n          rel: \"preload\",\n          href: file.src,\n          as: \"script\",\n          crossOrigin: _this3.props.crossOrigin || crossOrigin\n        });\n      })), _toConsumableArray(preloadFiles.map(function (file) {\n        return /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n          key: file,\n          nonce: _this3.props.nonce,\n          rel: \"preload\",\n          href: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n          as: \"script\",\n          crossOrigin: _this3.props.crossOrigin || crossOrigin\n        });\n      })));\n    }\n  }, {\n    key: \"getBeforeInteractiveInlineScripts\",\n    value: function getBeforeInteractiveInlineScripts() {\n      var scriptLoader = this.context.scriptLoader;\n      var _this$props = this.props,\n          nonce = _this$props.nonce,\n          crossOrigin = _this$props.crossOrigin;\n      return (scriptLoader.beforeInteractive || []).filter(function (script) {\n        return !script.src && (script.dangerouslySetInnerHTML || script.children);\n      }).map(function (file, index) {\n        var strategy = file.strategy,\n            children = file.children,\n            dangerouslySetInnerHTML = file.dangerouslySetInnerHTML,\n            src = file.src,\n            scriptProps = _objectWithoutProperties(file, _excluded4);\n\n        var html = \"\";\n\n        if (dangerouslySetInnerHTML && dangerouslySetInnerHTML.__html) {\n          html = dangerouslySetInnerHTML.__html;\n        } else if (children) {\n          html = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n        }\n\n        return /*#__PURE__*/_react[\"default\"].createElement(\"script\", _objectSpread(_objectSpread({}, scriptProps), {}, {\n          dangerouslySetInnerHTML: {\n            __html: html\n          },\n          key: scriptProps.id || index,\n          nonce: nonce,\n          \"data-nscript\": \"beforeInteractive\",\n          crossOrigin: crossOrigin || undefined\n        }));\n      });\n    }\n  }, {\n    key: \"getDynamicChunks\",\n    value: function getDynamicChunks(files) {\n      return _getDynamicChunks(this.context, this.props, files);\n    }\n  }, {\n    key: \"getPreNextScripts\",\n    value: function getPreNextScripts() {\n      return _getPreNextScripts(this.context, this.props);\n    }\n  }, {\n    key: \"getScripts\",\n    value: function getScripts(files) {\n      return _getScripts(this.context, this.props, files);\n    }\n  }, {\n    key: \"getPolyfillScripts\",\n    value: function getPolyfillScripts() {\n      return _getPolyfillScripts(this.context, this.props);\n    }\n  }, {\n    key: \"makeStylesheetInert\",\n    value: function makeStylesheetInert(node) {\n      var _this4 = this;\n\n      return _react[\"default\"].Children.map(node, function (c) {\n        var _c_props, _c_props1;\n\n        if ((c == null ? void 0 : c.type) === \"link\" && (c == null ? void 0 : (_c_props = c.props) == null ? void 0 : _c_props.href) && _constants.OPTIMIZED_FONT_PROVIDERS.some(function (_ref2) {\n          var url = _ref2.url;\n\n          var _c_props, _c_props_href;\n\n          return c == null ? void 0 : (_c_props = c.props) == null ? void 0 : (_c_props_href = _c_props.href) == null ? void 0 : _c_props_href.startsWith(url);\n        })) {\n          var newProps = _objectSpread(_objectSpread({}, c.props || {}), {}, {\n            \"data-href\": c.props.href,\n            href: undefined\n          });\n\n          return /*#__PURE__*/_react[\"default\"].cloneElement(c, newProps);\n        } else if (c == null ? void 0 : (_c_props1 = c.props) == null ? void 0 : _c_props1.children) {\n          var _newProps = _objectSpread(_objectSpread({}, c.props || {}), {}, {\n            children: _this4.makeStylesheetInert(c.props.children)\n          });\n\n          return /*#__PURE__*/_react[\"default\"].cloneElement(c, _newProps);\n        }\n\n        return c; // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`\n      }).filter(Boolean);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this,\n          _this$props$nonce,\n          _this$props$nonce2,\n          _react$default;\n\n      var _this$context4 = this.context,\n          styles = _this$context4.styles,\n          ampPath = _this$context4.ampPath,\n          inAmpMode = _this$context4.inAmpMode,\n          hybridAmp = _this$context4.hybridAmp,\n          canonicalBase = _this$context4.canonicalBase,\n          __NEXT_DATA__ = _this$context4.__NEXT_DATA__,\n          dangerousAsPath = _this$context4.dangerousAsPath,\n          headTags = _this$context4.headTags,\n          unstable_runtimeJS = _this$context4.unstable_runtimeJS,\n          unstable_JsPreload = _this$context4.unstable_JsPreload,\n          disableOptimizedLoading = _this$context4.disableOptimizedLoading,\n          optimizeCss = _this$context4.optimizeCss,\n          optimizeFonts = _this$context4.optimizeFonts,\n          assetPrefix = _this$context4.assetPrefix,\n          nextFontManifest = _this$context4.nextFontManifest;\n      var disableRuntimeJS = unstable_runtimeJS === false;\n      var disableJsPreload = unstable_JsPreload === false || !disableOptimizedLoading;\n      this.context.docComponentsRendered.Head = true;\n      var head = this.context.head;\n      var cssPreloads = [];\n      var otherHeadElements = [];\n\n      if (head) {\n        head.forEach(function (c) {\n          var metaTag;\n\n          if (_this5.context.strictNextHead) {\n            metaTag = /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n              name: \"next-head\",\n              content: \"1\"\n            });\n          }\n\n          if (c && c.type === \"link\" && c.props[\"rel\"] === \"preload\" && c.props[\"as\"] === \"style\") {\n            metaTag && cssPreloads.push(metaTag);\n            cssPreloads.push(c);\n          } else {\n            if (c) {\n              if (metaTag && (c.type !== \"meta\" || !c.props[\"charSet\"])) {\n                otherHeadElements.push(metaTag);\n              }\n\n              otherHeadElements.push(c);\n            }\n          }\n        });\n        head = cssPreloads.concat(otherHeadElements);\n      }\n\n      var children = _react[\"default\"].Children.toArray(this.props.children).filter(Boolean); // show a warning if Head contains <title> (only in development)\n\n\n      if (true) {\n        children = _react[\"default\"].Children.map(children, function (child) {\n          var _child_props;\n\n          var isReactHelmet = child == null ? void 0 : (_child_props = child.props) == null ? void 0 : _child_props[\"data-react-helmet\"];\n\n          if (!isReactHelmet) {\n            var _child_props1;\n\n            if ((child == null ? void 0 : child.type) === \"title\") {\n              console.warn(\"Warning: <title> should not be used in _document.js's <Head>. https://nextjs.org/docs/messages/no-document-title\");\n            } else if ((child == null ? void 0 : child.type) === \"meta\" && (child == null ? void 0 : (_child_props1 = child.props) == null ? void 0 : _child_props1.name) === \"viewport\") {\n              console.warn(\"Warning: viewport meta tags should not be used in _document.js's <Head>. https://nextjs.org/docs/messages/no-document-viewport-meta\");\n            }\n          }\n\n          return child; // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`\n        });\n        if (this.props.crossOrigin) console.warn(\"Warning: `Head` attribute `crossOrigin` is deprecated. https://nextjs.org/docs/messages/doc-crossorigin-deprecated\");\n      }\n\n      if (false) {}\n\n      var hasAmphtmlRel = false;\n      var hasCanonicalRel = false; // show warning and remove conflicting amp head tags\n\n      head = _react[\"default\"].Children.map(head || [], function (child) {\n        if (!child) return child;\n        var type = child.type,\n            props = child.props;\n\n        if ( true && inAmpMode) {\n          var badProp = \"\";\n\n          if (type === \"meta\" && props.name === \"viewport\") {\n            badProp = 'name=\"viewport\"';\n          } else if (type === \"link\" && props.rel === \"canonical\") {\n            hasCanonicalRel = true;\n          } else if (type === \"script\") {\n            // only block if\n            // 1. it has a src and isn't pointing to ampproject's CDN\n            // 2. it is using dangerouslySetInnerHTML without a type or\n            // a type of text/javascript\n            if (props.src && props.src.indexOf(\"ampproject\") < -1 || props.dangerouslySetInnerHTML && (!props.type || props.type === \"text/javascript\")) {\n              badProp = \"<script\";\n              Object.keys(props).forEach(function (prop) {\n                badProp += \" \".concat(prop, \"=\\\"\").concat(props[prop], \"\\\"\");\n              });\n              badProp += \"/>\";\n            }\n          }\n\n          if (badProp) {\n            console.warn(\"Found conflicting amp tag \\\"\".concat(child.type, \"\\\" with conflicting prop \").concat(badProp, \" in \").concat(__NEXT_DATA__.page, \". https://nextjs.org/docs/messages/conflicting-amp-tag\"));\n            return null;\n          }\n        } else {\n          // non-amp mode\n          if (type === \"link\" && props.rel === \"amphtml\") {\n            hasAmphtmlRel = true;\n          }\n        }\n\n        return child; // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`\n      });\n      var files = getDocumentFiles(this.context.buildManifest, this.context.__NEXT_DATA__.page,  true && inAmpMode);\n      var nextFontLinkTags = getNextFontLinkTags(nextFontManifest, dangerousAsPath, assetPrefix);\n      return /*#__PURE__*/_react[\"default\"].createElement(\"head\", getHeadHTMLProps(this.props), this.context.isDevelopment && /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n        \"data-next-hide-fouc\": true,\n        \"data-ampdevmode\":  true && inAmpMode ? \"true\" : undefined,\n        dangerouslySetInnerHTML: {\n          __html: \"body{display:none}\"\n        }\n      }), /*#__PURE__*/_react[\"default\"].createElement(\"noscript\", {\n        \"data-next-hide-fouc\": true,\n        \"data-ampdevmode\":  true && inAmpMode ? \"true\" : undefined\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n        dangerouslySetInnerHTML: {\n          __html: \"body{display:block}\"\n        }\n      }))), head, this.context.strictNextHead ? null : /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n        name: \"next-head-count\",\n        content: _react[\"default\"].Children.count(head || []).toString()\n      }), children, optimizeFonts && /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n        name: \"next-font-preconnect\"\n      }), nextFontLinkTags.preconnect, nextFontLinkTags.preload,  true && inAmpMode && /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width,minimum-scale=1,initial-scale=1\"\n      }), !hasCanonicalRel && /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n        rel: \"canonical\",\n        href: canonicalBase + (__webpack_require__(/*! ../server/utils */ \"../server/utils\").cleanAmpPath)(dangerousAsPath)\n      }), /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n        rel: \"preload\",\n        as: \"script\",\n        href: \"https://cdn.ampproject.org/v0.js\"\n      }), /*#__PURE__*/_react[\"default\"].createElement(AmpStyles, {\n        styles: styles\n      }), /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n        \"amp-boilerplate\": \"\",\n        dangerouslySetInnerHTML: {\n          __html: \"body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}\"\n        }\n      }), /*#__PURE__*/_react[\"default\"].createElement(\"noscript\", null, /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n        \"amp-boilerplate\": \"\",\n        dangerouslySetInnerHTML: {\n          __html: \"body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}\"\n        }\n      })), /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n        async: true,\n        src: \"https://cdn.ampproject.org/v0.js\"\n      })), !( true && inAmpMode) && /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, !hasAmphtmlRel && hybridAmp && /*#__PURE__*/_react[\"default\"].createElement(\"link\", {\n        rel: \"amphtml\",\n        href: canonicalBase + getAmpPath(ampPath, dangerousAsPath)\n      }), this.getBeforeInteractiveInlineScripts(), !optimizeCss && this.getCssLinks(files), !optimizeCss && /*#__PURE__*/_react[\"default\"].createElement(\"noscript\", {\n        \"data-n-css\": (_this$props$nonce = this.props.nonce) !== null && _this$props$nonce !== void 0 ? _this$props$nonce : \"\"\n      }), !disableRuntimeJS && !disableJsPreload && this.getPreloadDynamicChunks(), !disableRuntimeJS && !disableJsPreload && this.getPreloadMainLinks(files), !disableOptimizedLoading && !disableRuntimeJS && this.getPolyfillScripts(), !disableOptimizedLoading && !disableRuntimeJS && this.getPreNextScripts(), !disableOptimizedLoading && !disableRuntimeJS && this.getDynamicChunks(files), !disableOptimizedLoading && !disableRuntimeJS && this.getScripts(files), optimizeCss && this.getCssLinks(files), optimizeCss && /*#__PURE__*/_react[\"default\"].createElement(\"noscript\", {\n        \"data-n-css\": (_this$props$nonce2 = this.props.nonce) !== null && _this$props$nonce2 !== void 0 ? _this$props$nonce2 : \"\"\n      }), this.context.isDevelopment && // this element is used to mount development styles so the\n      // ordering matches production\n      // (by default, style-loader injects at the bottom of <head />)\n\n      /*#__PURE__*/\n      _react[\"default\"].createElement(\"noscript\", {\n        id: \"__next_css__DO_NOT_USE__\"\n      }), styles || null), /*#__PURE__*/(_react$default = _react[\"default\"]).createElement.apply(_react$default, [_react[\"default\"].Fragment, {}].concat(_toConsumableArray(headTags || []))));\n    }\n  }]);\n\n  return _Head;\n}(_react[\"default\"].Component);\n\nvar _ = {\n  writable: true,\n  value: function () {\n    _Head.contextType = _htmlcontext.HtmlContext;\n  }()\n};\n\nfunction handleDocumentScriptLoaderItems(scriptLoader, __NEXT_DATA__, props) {\n  var _children_find, _children_find_props, _children_find1, _children_find_props1;\n\n  if (!props.children) return;\n  var scriptLoaderItems = [];\n  var children = Array.isArray(props.children) ? props.children : [props.children];\n  var headChildren = (_children_find = children.find(function (child) {\n    return child.type === _Head;\n  })) == null ? void 0 : (_children_find_props = _children_find.props) == null ? void 0 : _children_find_props.children;\n  var bodyChildren = (_children_find1 = children.find(function (child) {\n    return child.type === \"body\";\n  })) == null ? void 0 : (_children_find_props1 = _children_find1.props) == null ? void 0 : _children_find_props1.children; // Scripts with beforeInteractive can be placed inside Head or <body> so children of both needs to be traversed\n\n  var combinedChildren = [].concat(_toConsumableArray(Array.isArray(headChildren) ? headChildren : [headChildren]), _toConsumableArray(Array.isArray(bodyChildren) ? bodyChildren : [bodyChildren]));\n\n  _react[\"default\"].Children.forEach(combinedChildren, function (child) {\n    var _child_type;\n\n    if (!child) return; // When using the `next/script` component, register it in script loader.\n\n    if ((_child_type = child.type) == null ? void 0 : _child_type.__nextScript) {\n      if (child.props.strategy === \"beforeInteractive\") {\n        scriptLoader.beforeInteractive = (scriptLoader.beforeInteractive || []).concat([_objectSpread({}, child.props)]);\n        return;\n      } else if ([\"lazyOnload\", \"afterInteractive\", \"worker\"].includes(child.props.strategy)) {\n        scriptLoaderItems.push(child.props);\n        return;\n      }\n    }\n  });\n\n  __NEXT_DATA__.scriptLoader = scriptLoaderItems;\n}\n\nvar _NextScript = /*#__PURE__*/function (_react$default$Compon2) {\n  _inherits(_NextScript, _react$default$Compon2);\n\n  var _super2 = _createSuper(_NextScript);\n\n  function _NextScript() {\n    _classCallCheck(this, _NextScript);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(_NextScript, [{\n    key: \"getDynamicChunks\",\n    value: function getDynamicChunks(files) {\n      return _getDynamicChunks(this.context, this.props, files);\n    }\n  }, {\n    key: \"getPreNextScripts\",\n    value: function getPreNextScripts() {\n      return _getPreNextScripts(this.context, this.props);\n    }\n  }, {\n    key: \"getScripts\",\n    value: function getScripts(files) {\n      return _getScripts(this.context, this.props, files);\n    }\n  }, {\n    key: \"getPolyfillScripts\",\n    value: function getPolyfillScripts() {\n      return _getPolyfillScripts(this.context, this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var _this$context5 = this.context,\n          assetPrefix = _this$context5.assetPrefix,\n          inAmpMode = _this$context5.inAmpMode,\n          buildManifest = _this$context5.buildManifest,\n          unstable_runtimeJS = _this$context5.unstable_runtimeJS,\n          docComponentsRendered = _this$context5.docComponentsRendered,\n          devOnlyCacheBusterQueryString = _this$context5.devOnlyCacheBusterQueryString,\n          disableOptimizedLoading = _this$context5.disableOptimizedLoading,\n          crossOrigin = _this$context5.crossOrigin;\n      var disableRuntimeJS = unstable_runtimeJS === false;\n      docComponentsRendered.NextScript = true;\n\n      if ( true && inAmpMode) {\n        if (false) {}\n\n        var ampDevFiles = [].concat(_toConsumableArray(buildManifest.devFiles), _toConsumableArray(buildManifest.polyfillFiles), _toConsumableArray(buildManifest.ampDevFiles));\n        return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, disableRuntimeJS ? null : /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n          id: \"__NEXT_DATA__\",\n          type: \"application/json\",\n          nonce: this.props.nonce,\n          crossOrigin: this.props.crossOrigin || crossOrigin,\n          dangerouslySetInnerHTML: {\n            __html: _NextScript.getInlineScriptSource(this.context)\n          },\n          \"data-ampdevmode\": true\n        }), ampDevFiles.map(function (file) {\n          return /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n            key: file,\n            src: \"\".concat(assetPrefix, \"/_next/\").concat(file).concat(devOnlyCacheBusterQueryString),\n            nonce: _this6.props.nonce,\n            crossOrigin: _this6.props.crossOrigin || crossOrigin,\n            \"data-ampdevmode\": true\n          });\n        }));\n      }\n\n      if (true) {\n        if (this.props.crossOrigin) console.warn(\"Warning: `NextScript` attribute `crossOrigin` is deprecated. https://nextjs.org/docs/messages/doc-crossorigin-deprecated\");\n      }\n\n      var files = getDocumentFiles(this.context.buildManifest, this.context.__NEXT_DATA__.page,  true && inAmpMode);\n      return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, !disableRuntimeJS && buildManifest.devFiles ? buildManifest.devFiles.map(function (file) {\n        return /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n          key: file,\n          src: \"\".concat(assetPrefix, \"/_next/\").concat(encodeURI(file)).concat(devOnlyCacheBusterQueryString),\n          nonce: _this6.props.nonce,\n          crossOrigin: _this6.props.crossOrigin || crossOrigin\n        });\n      }) : null, disableRuntimeJS ? null : /*#__PURE__*/_react[\"default\"].createElement(\"script\", {\n        id: \"__NEXT_DATA__\",\n        type: \"application/json\",\n        nonce: this.props.nonce,\n        crossOrigin: this.props.crossOrigin || crossOrigin,\n        dangerouslySetInnerHTML: {\n          __html: _NextScript.getInlineScriptSource(this.context)\n        }\n      }), disableOptimizedLoading && !disableRuntimeJS && this.getPolyfillScripts(), disableOptimizedLoading && !disableRuntimeJS && this.getPreNextScripts(), disableOptimizedLoading && !disableRuntimeJS && this.getDynamicChunks(files), disableOptimizedLoading && !disableRuntimeJS && this.getScripts(files));\n    }\n  }], [{\n    key: \"getInlineScriptSource\",\n    value: function getInlineScriptSource(context) {\n      var __NEXT_DATA__ = context.__NEXT_DATA__,\n          largePageDataBytes = context.largePageDataBytes;\n\n      try {\n        var data = JSON.stringify(__NEXT_DATA__);\n\n        if (largePageDataWarnings.has(__NEXT_DATA__.page)) {\n          return (0, _htmlescape.htmlEscapeJsonString)(data);\n        }\n\n        var bytes =  false ? 0 : Buffer.from(data).byteLength;\n\n        var prettyBytes = (__webpack_require__(/*! ../lib/pretty-bytes */ \"./node_modules/next/dist/lib/pretty-bytes.js\")[\"default\"]);\n\n        if (largePageDataBytes && bytes > largePageDataBytes) {\n          if (false) {}\n\n          console.warn(\"Warning: data for page \\\"\".concat(__NEXT_DATA__.page, \"\\\"\").concat(__NEXT_DATA__.page === context.dangerousAsPath ? \"\" : \" (path \\\"\".concat(context.dangerousAsPath, \"\\\")\"), \" is \").concat(prettyBytes(bytes), \" which exceeds the threshold of \").concat(prettyBytes(largePageDataBytes), \", this amount of data can reduce performance.\\nSee more info here: https://nextjs.org/docs/messages/large-page-data\"));\n        }\n\n        return (0, _htmlescape.htmlEscapeJsonString)(data);\n      } catch (err) {\n        if ((0, _iserror[\"default\"])(err) && err.message.indexOf(\"circular structure\") !== -1) {\n          throw new Error(\"Circular structure in \\\"getInitialProps\\\" result of page \\\"\".concat(__NEXT_DATA__.page, \"\\\". https://nextjs.org/docs/messages/circular-structure\"));\n        }\n\n        throw err;\n      }\n    }\n  }]);\n\n  return _NextScript;\n}(_react[\"default\"].Component);\n\nvar _2 = {\n  writable: true,\n  value: function () {\n    _NextScript.contextType = _htmlcontext.HtmlContext;\n  }()\n};\n\nfunction _Html(props) {\n  var _ref3 = (0, _react.useContext)(_htmlcontext.HtmlContext),\n      inAmpMode = _ref3.inAmpMode,\n      docComponentsRendered = _ref3.docComponentsRendered,\n      locale = _ref3.locale,\n      scriptLoader = _ref3.scriptLoader,\n      __NEXT_DATA__ = _ref3.__NEXT_DATA__;\n\n  docComponentsRendered.Html = true;\n  handleDocumentScriptLoaderItems(scriptLoader, __NEXT_DATA__, props);\n  return /*#__PURE__*/_react[\"default\"].createElement(\"html\", _objectSpread(_objectSpread({}, props), {}, {\n    lang: props.lang || locale || undefined,\n    amp:  true && inAmpMode ? \"\" : undefined,\n    \"data-ampdevmode\":  true && inAmpMode && true ? \"\" : undefined\n  }));\n}\n\nfunction _Main() {\n  var _ref4 = (0, _react.useContext)(_htmlcontext.HtmlContext),\n      docComponentsRendered = _ref4.docComponentsRendered;\n\n  docComponentsRendered.Main = true; // @ts-ignore\n\n  return /*#__PURE__*/_react[\"default\"].createElement(\"next-js-internal-body-render-target\", null);\n}\n\nvar Document = /*#__PURE__*/function (_react$default$Compon3) {\n  _inherits(Document, _react$default$Compon3);\n\n  var _super3 = _createSuper(Document);\n\n  function Document() {\n    _classCallCheck(this, Document);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(Document, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_react[\"default\"].createElement(_Html, null, /*#__PURE__*/_react[\"default\"].createElement(_Head, null), /*#__PURE__*/_react[\"default\"].createElement(\"body\", null, /*#__PURE__*/_react[\"default\"].createElement(_Main, null), /*#__PURE__*/_react[\"default\"].createElement(_NextScript, null)));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value:\n    /**\n    * `getInitialProps` hook returns the context object with the addition of `renderPage`.\n    * `renderPage` callback executes `React` rendering logic synchronously to support server-rendering wrappers\n    */\n    function getInitialProps(ctx) {\n      return ctx.defaultGetInitialProps(ctx);\n    }\n  }]);\n\n  return Document;\n}(_react[\"default\"].Component); // Add a special property to the built-in `Document` component so later we can\n// identify if a user customized `Document` is used or not.\n\n\nvar InternalFunctionDocument = function InternalFunctionDocument() {\n  return /*#__PURE__*/_react[\"default\"].createElement(_Html, null, /*#__PURE__*/_react[\"default\"].createElement(_Head, null), /*#__PURE__*/_react[\"default\"].createElement(\"body\", null, /*#__PURE__*/_react[\"default\"].createElement(_Main, null), /*#__PURE__*/_react[\"default\"].createElement(_NextScript, null)));\n};\n\nDocument[_constants.NEXT_BUILTIN_DOCUMENT] = InternalFunctionDocument;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/pages/_document.js\n");

/***/ }),

/***/ "./node_modules/next/dist/lib/is-error.js":
/*!************************************************!*\
  !*** ./node_modules/next/dist/lib/is-error.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return isError;\n    },\n    getProperError: function() {\n        return getProperError;\n    }\n});\nconst _isplainobject = __webpack_require__(/*! ../shared/lib/is-plain-object */ \"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === \"object\" && err !== null && \"name\" in err && \"message\" in err;\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (true) {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === \"undefined\") {\n            return new Error(\"An undefined error was thrown, \" + \"see here for more info: https://nextjs.org/docs/messages/threw-undefined\");\n        }\n        if (err === null) {\n            return new Error(\"A null error was thrown, \" + \"see here for more info: https://nextjs.org/docs/messages/threw-undefined\");\n        }\n    }\n    return new Error((0, _isplainobject.isPlainObject)(err) ? JSON.stringify(err) : err + \"\");\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx1QkFBdUIsbUJBQU8sQ0FBQyxvRUFBK0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLElBQXNDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb3VuZGF0aW9ucy1jb3Vyc2UtZGVtby8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL2lzLWVycm9yLmpzPzE3OGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBkZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3I7XG4gICAgfSxcbiAgICBnZXRQcm9wZXJFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRQcm9wZXJFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IF9pc3BsYWlub2JqZWN0ID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvaXMtcGxhaW4tb2JqZWN0XCIpO1xuZnVuY3Rpb24gaXNFcnJvcihlcnIpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVyciA9PT0gXCJvYmplY3RcIiAmJiBlcnIgIT09IG51bGwgJiYgXCJuYW1lXCIgaW4gZXJyICYmIFwibWVzc2FnZVwiIGluIGVycjtcbn1cbmZ1bmN0aW9uIGdldFByb3BlckVycm9yKGVycikge1xuICAgIGlmIChpc0Vycm9yKGVycikpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgLy8gcHJvdmlkZSBiZXR0ZXIgZXJyb3IgZm9yIGNhc2Ugd2hlcmUgYHRocm93IHVuZGVmaW5lZGBcbiAgICAgICAgLy8gaXMgY2FsbGVkIGluIGRldmVsb3BtZW50XG4gICAgICAgIGlmICh0eXBlb2YgZXJyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiQW4gdW5kZWZpbmVkIGVycm9yIHdhcyB0aHJvd24sIFwiICsgXCJzZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy90aHJldy11bmRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkEgbnVsbCBlcnJvciB3YXMgdGhyb3duLCBcIiArIFwic2VlIGhlcmUgZm9yIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvdGhyZXctdW5kZWZpbmVkXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoKDAsIF9pc3BsYWlub2JqZWN0LmlzUGxhaW5PYmplY3QpKGVycikgPyBKU09OLnN0cmluZ2lmeShlcnIpIDogZXJyICsgXCJcIik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "./node_modules/next/dist/lib/pretty-bytes.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/lib/pretty-bytes.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return prettyBytes;\n    }\n}));\nconst UNITS = [\n    \"B\",\n    \"kB\",\n    \"MB\",\n    \"GB\",\n    \"TB\",\n    \"PB\",\n    \"EB\",\n    \"ZB\",\n    \"YB\"\n];\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/ const toLocaleString = (number, locale)=>{\n    let result = number;\n    if (typeof locale === \"string\") {\n        result = number.toLocaleString(locale);\n    } else if (locale === true) {\n        result = number.toLocaleString();\n    }\n    return result;\n};\nfunction prettyBytes(number, options) {\n    if (!Number.isFinite(number)) {\n        throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n    }\n    options = Object.assign({}, options);\n    if (options.signed && number === 0) {\n        return \" 0 B\";\n    }\n    const isNegative = number < 0;\n    const prefix = isNegative ? \"-\" : options.signed ? \"+\" : \"\";\n    if (isNegative) {\n        number = -number;\n    }\n    if (number < 1) {\n        const numberString = toLocaleString(number, options.locale);\n        return prefix + numberString + \" B\";\n    }\n    const exponent = Math.min(Math.floor(Math.log10(number) / 3), UNITS.length - 1);\n    number = Number((number / Math.pow(1000, exponent)).toPrecision(3));\n    const numberString = toLocaleString(number, options.locale);\n    const unit = UNITS[exponent];\n    return prefix + numberString + \" \" + unit;\n}\n\n//# sourceMappingURL=pretty-bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9wcmV0dHktYnl0ZXMuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLEdBQWdCO0FBQ2hCLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDJDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGNBQWMsSUFBSSxPQUFPO0FBQ3RGO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZvdW5kYXRpb25zLWNvdXJzZS1kZW1vLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvcHJldHR5LWJ5dGVzLmpzP2ZmMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKHNpbmRyZXNvcmh1cy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJldHR5Qnl0ZXM7XG4gICAgfVxufSk7XG5jb25zdCBVTklUUyA9IFtcbiAgICBcIkJcIixcbiAgICBcImtCXCIsXG4gICAgXCJNQlwiLFxuICAgIFwiR0JcIixcbiAgICBcIlRCXCIsXG4gICAgXCJQQlwiLFxuICAgIFwiRUJcIixcbiAgICBcIlpCXCIsXG4gICAgXCJZQlwiXG5dO1xuLypcbkZvcm1hdHMgdGhlIGdpdmVuIG51bWJlciB1c2luZyBgTnVtYmVyI3RvTG9jYWxlU3RyaW5nYC5cbi0gSWYgbG9jYWxlIGlzIGEgc3RyaW5nLCB0aGUgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgYSBsb2NhbGUta2V5IChmb3IgZXhhbXBsZTogYGRlYCkuXG4tIElmIGxvY2FsZSBpcyB0cnVlLCB0aGUgc3lzdGVtIGRlZmF1bHQgbG9jYWxlIGlzIHVzZWQgZm9yIHRyYW5zbGF0aW9uLlxuLSBJZiBubyB2YWx1ZSBmb3IgbG9jYWxlIGlzIHNwZWNpZmllZCwgdGhlIG51bWJlciBpcyByZXR1cm5lZCB1bm1vZGlmaWVkLlxuKi8gY29uc3QgdG9Mb2NhbGVTdHJpbmcgPSAobnVtYmVyLCBsb2NhbGUpPT57XG4gICAgbGV0IHJlc3VsdCA9IG51bWJlcjtcbiAgICBpZiAodHlwZW9mIGxvY2FsZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXN1bHQgPSBudW1iZXIudG9Mb2NhbGVTdHJpbmcobG9jYWxlKTtcbiAgICB9IGVsc2UgaWYgKGxvY2FsZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSBudW1iZXIudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5mdW5jdGlvbiBwcmV0dHlCeXRlcyhudW1iZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgZmluaXRlIG51bWJlciwgZ290ICR7dHlwZW9mIG51bWJlcn06ICR7bnVtYmVyfWApO1xuICAgIH1cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmVkICYmIG51bWJlciA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCIgMCBCXCI7XG4gICAgfVxuICAgIGNvbnN0IGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwO1xuICAgIGNvbnN0IHByZWZpeCA9IGlzTmVnYXRpdmUgPyBcIi1cIiA6IG9wdGlvbnMuc2lnbmVkID8gXCIrXCIgOiBcIlwiO1xuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAxKSB7XG4gICAgICAgIGNvbnN0IG51bWJlclN0cmluZyA9IHRvTG9jYWxlU3RyaW5nKG51bWJlciwgb3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgbnVtYmVyU3RyaW5nICsgXCIgQlwiO1xuICAgIH1cbiAgICBjb25zdCBleHBvbmVudCA9IE1hdGgubWluKE1hdGguZmxvb3IoTWF0aC5sb2cxMChudW1iZXIpIC8gMyksIFVOSVRTLmxlbmd0aCAtIDEpO1xuICAgIG51bWJlciA9IE51bWJlcigobnVtYmVyIC8gTWF0aC5wb3coMTAwMCwgZXhwb25lbnQpKS50b1ByZWNpc2lvbigzKSk7XG4gICAgY29uc3QgbnVtYmVyU3RyaW5nID0gdG9Mb2NhbGVTdHJpbmcobnVtYmVyLCBvcHRpb25zLmxvY2FsZSk7XG4gICAgY29uc3QgdW5pdCA9IFVOSVRTW2V4cG9uZW50XTtcbiAgICByZXR1cm4gcHJlZml4ICsgbnVtYmVyU3RyaW5nICsgXCIgXCIgKyB1bml0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmV0dHktYnl0ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/lib/pretty-bytes.js\n");

/***/ }),

/***/ "../server/get-page-files":
/*!*****************************************************!*\
  !*** external "next/dist/server/get-page-files.js" ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/get-page-files.js");

/***/ }),

/***/ "../server/htmlescape":
/*!*************************************************!*\
  !*** external "next/dist/server/htmlescape.js" ***!
  \*************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/htmlescape.js");

/***/ }),

/***/ "../server/utils":
/*!********************************************!*\
  !*** external "next/dist/server/utils.js" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/utils.js");

/***/ }),

/***/ "../shared/lib/constants":
/*!****************************************************!*\
  !*** external "next/dist/shared/lib/constants.js" ***!
  \****************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/constants.js");

/***/ }),

/***/ "../shared/lib/html-context":
/*!*******************************************************!*\
  !*** external "next/dist/shared/lib/html-context.js" ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/html-context.js");

/***/ }),

/***/ "../shared/lib/is-plain-object":
/*!**********************************************************!*\
  !*** external "next/dist/shared/lib/is-plain-object.js" ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./node_modules/next/dist/pages/_document.js"));
module.exports = __webpack_exports__;

})();